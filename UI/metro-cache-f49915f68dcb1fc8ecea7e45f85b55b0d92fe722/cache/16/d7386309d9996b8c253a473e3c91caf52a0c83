__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _class,
        _temp,
        _jsxFileName = "/home/monopolized/github/languagescavengers/UI/screens/DiscoveryModeScreen.js";

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _expo = _require(_dependencyMap[3], "expo");

    var _vectorIcons = _require(_dependencyMap[4], "@expo/vector-icons");

    var _CardScroll = _require(_dependencyMap[5], "../components/CardScroll");

    var _CardScroll2 = _interopRequireDefault(_CardScroll);

    var _ButtonCamera = _require(_dependencyMap[6], "../components/ButtonCamera");

    var _ButtonCamera2 = _interopRequireDefault(_ButtonCamera);

    var _ButtonSkip = _require(_dependencyMap[7], "../components/ButtonSkip");

    var _ButtonSkip2 = _interopRequireDefault(_ButtonSkip);

    var _ButtonNextWord = _require(_dependencyMap[8], "../components/ButtonNextWord");

    var _ButtonNextWord2 = _interopRequireDefault(_ButtonNextWord);

    var _Card = _require(_dependencyMap[9], "../components/Card");

    var _Card2 = _interopRequireDefault(_Card);

    var _vocabDictionary = _require(_dependencyMap[10], "../data/vocabDictionary");

    var _vocabDictionary2 = _interopRequireDefault(_vocabDictionary);

    var _axios = _require(_dependencyMap[11], "axios");

    var _axios2 = _interopRequireDefault(_axios);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        DiscoveryMode: {
            displayName: "DiscoveryMode"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/monopolized/github/languagescavengers/UI/screens/DiscoveryModeScreen.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var DiscoveryMode = _wrapComponent("DiscoveryMode")((_temp = _class = function (_React$Component) {
        _inherits(DiscoveryMode, _React$Component);

        function DiscoveryMode(props) {
            var _this2 = this;

            _classCallCheck(this, DiscoveryMode);

            var _this = _possibleConstructorReturn(this, (DiscoveryMode.__proto__ || Object.getPrototypeOf(DiscoveryMode)).call(this, props));

            _this.handleCameraClick = function _callee() {
                var response;
                return regeneratorRuntime.async(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.prev = 0;
                                result = getPermsAsync();
                                setTimeout(function () {
                                    return _this.setState({
                                        loading: true
                                    }, function () {
                                        return _this.spin();
                                    });
                                }, 1000);
                                _context.next = 5;
                                return regeneratorRuntime.awrap(takePhotoAsync());

                            case 5:
                                response = _context.sent;

                                if (response !== 0) {
                                    console.log(response.data);

                                    _this.setState({
                                        loading: false,
                                        correct: true,
                                        foundWord: response.data
                                    });
                                }

                                _this.setState({
                                    loading: false,
                                    correct: true,
                                    foundWord: response.data
                                });

                                console.log(_this.foundWord);
                                return _context.abrupt("return");

                            case 12:
                                _context.prev = 12;
                                _context.t0 = _context["catch"](0);
                                alert(_context.t0);

                            case 15:
                                ;

                            case 16:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, null, _this2, [[0, 12]]);
            };

            _this.spin = function () {
                _this.spinValue.setValue(0);

                _reactNative.Animated.timing(_this.spinValue, {
                    toValue: 1,
                    duration: 1000,
                    easing: _reactNative.Easing.linear,
                    useNativeDriver: true
                }).start(function () {
                    return _this.spin();
                });
            };

            _this.state = {
                score: 0,
                previousWordIndex: 0,
                foundWord: '',
                correct: false,
                incorrect: false
            };
            _this.handleCameraClick = _this.handleCameraClick.bind(_this);
            _this.spinValue = new _reactNative.Animated.Value(0);
            return _this;
        }

        _createClass(DiscoveryMode, [{
            key: "render",
            value: function render() {
                var rotate = this.spinValue.interpolate({
                    inputRange: [0, 1],
                    outputRange: ['0deg', '360deg']
                });

                var screen = _react3.default.createElement(
                    _reactNative.ScrollView,
                    {
                        style: styles.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 108
                        }
                    },
                    _react3.default.createElement(
                        _CardScroll2.default,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 109
                            }
                        },
                        _react3.default.createElement(
                            _reactNative.View,
                            {
                                style: styles.Header,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 110
                                }
                            },
                            _react3.default.createElement(_vectorIcons.FontAwesome, {
                                name: "rocket",
                                size: 30,
                                style: styles.MagnifyingGlass,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 112
                                }
                            }),
                            _react3.default.createElement(
                                _reactNative.Text,
                                {
                                    style: styles.TileHeaderText,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 113
                                    }
                                },
                                " Discovery mode"
                            )
                        ),
                        _react3.default.createElement(
                            _reactNative.View,
                            {
                                style: styles.SubHeader,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 115
                                }
                            },
                            _react3.default.createElement(
                                _reactNative.Text,
                                {
                                    style: styles.SubText,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 116
                                    }
                                },
                                "Discover how to say a variety of new words throughout the world in a new language. Click the camera button when you want to begin."
                            )
                        ),
                        _react3.default.createElement(
                            _reactNative.View,
                            {
                                style: styles.Options,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 120
                                }
                            },
                            _react3.default.createElement(_ButtonCamera2.default, {
                                clickHandler: this.handleCameraClick,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 121
                                }
                            })
                        )
                    )
                );

                if (this.state.loading) {
                    screen = _react3.default.createElement(
                        _reactNative.ScrollView,
                        {
                            style: styles.container,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 130
                            }
                        },
                        _react3.default.createElement(
                            _reactNative.View,
                            {
                                style: styles.containerLoading,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 131
                                }
                            },
                            _react3.default.createElement(
                                _reactNative.Animated.View,
                                {
                                    style: {
                                        transform: [{
                                            rotate: rotate
                                        }]
                                    },
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 132
                                    }
                                },
                                _react3.default.createElement(_vectorIcons.FontAwesome, {
                                    name: "spinner",
                                    size: 100,
                                    style: styles.Loading,
                                    spin: true,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 133
                                    }
                                })
                            )
                        )
                    );
                }

                ;

                if (this.state.correct) {
                    screen = _react3.default.createElement(
                        _reactNative.ScrollView,
                        {
                            style: styles.container,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 141
                            }
                        },
                        "/*Print out the item found and the translation */",
                        _react3.default.createElement(
                            _CardScroll2.default,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 143
                                }
                            },
                            _react3.default.createElement(
                                _reactNative.Text,
                                {
                                    style: styles.SubText,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 144
                                    }
                                },
                                " You Found ",
                                this.foundWord,
                                " "
                            )
                        ),
                        _react3.default.createElement(
                            _reactNative.View,
                            {
                                style: styles.Options,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 146
                                }
                            },
                            _react3.default.createElement(_ButtonNextWord2.default, {
                                clickHandler: this.handleNextButton,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 147
                                }
                            })
                        )
                    );
                }

                ;

                if (this.state.incorrect) {
                    screen = _react3.default.createElement(
                        _reactNative.ScrollView,
                        {
                            style: styles.container,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 154
                            }
                        },
                        _react3.default.createElement(
                            _Card2.default,
                            {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 155
                                }
                            },
                            _react3.default.createElement(_vectorIcons.FontAwesome, {
                                name: "times-circle",
                                size: 60,
                                style: styles.Check,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 156
                                }
                            }),
                            _react3.default.createElement(
                                _reactNative.Text,
                                {
                                    style: styles.TileHeaderText,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 157
                                    }
                                },
                                " Try Again "
                            )
                        ),
                        _react3.default.createElement(
                            _reactNative.View,
                            {
                                style: styles.Options,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 159
                                }
                            },
                            _react3.default.createElement(_ButtonCamera2.default, {
                                clickHandler: this.handleCameraClick,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 160
                                }
                            }),
                            _react3.default.createElement(_ButtonSkip2.default, {
                                clickHandler: this.handleSkipClick,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 161
                                }
                            })
                        )
                    );
                }

                ;
                return screen;
            }
        }]);

        return DiscoveryMode;
    }(_react3.default.Component), _class.navigationOptions = {
        headerTransparent: true
    }, _temp));

    exports.default = DiscoveryMode;

    function getPermsAsync() {
        var _ref, status;

        return regeneratorRuntime.async(function getPermsAsync$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        _context2.next = 2;
                        return regeneratorRuntime.awrap(_expo.Permissions.askAsync(_expo.Permissions.CAMERA, _expo.Permissions.CAMERA_ROLL));

                    case 2:
                        _ref = _context2.sent;
                        status = _ref.status;

                        if (!(status === 'granted')) {
                            _context2.next = 8;
                            break;
                        }

                        return _context2.abrupt("return", status);

                    case 8:
                        return _context2.abrupt("return", 69);

                    case 9:
                    case "end":
                        return _context2.stop();
                }
            }
        }, null, this);
    }

    function takePhotoAsync() {
        var result, localUri, filename, match, type, formData;
        return regeneratorRuntime.async(function takePhotoAsync$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        _context3.next = 2;
                        return regeneratorRuntime.awrap(_expo.ImagePicker.launchCameraAsync({
                            allowsEditing: true,
                            aspect: [4, 3]
                        }));

                    case 2:
                        result = _context3.sent;

                        if (!result.cancelled) {
                            _context3.next = 5;
                            break;
                        }

                        return _context3.abrupt("return", 0);

                    case 5:
                        localUri = result.uri;
                        filename = localUri.split('/').pop();
                        match = /\.(\w+)$/.exec(filename);
                        type = match ? "image/" + match[1] : "image";
                        formData = new FormData();
                        formData.append('photo', {
                            uri: localUri,
                            name: filename,
                            type: type
                        });
                        return _context3.abrupt("return", (0, _axios2.default)({
                            method: 'post',
                            url: 'http://fbf3eaea.ngrok.io/post',
                            data: formData,
                            headers: {
                                'contentt-type': 'multipart/form-data'
                            }
                        }));

                    case 12:
                    case "end":
                        return _context3.stop();
                }
            }
        }, null, this);
    }

    var styles = _reactNative.StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: '#ADD8E6',
            paddingTop: 65
        },
        Header: {
            flex: 1,
            flexDirection: 'row',
            height: 100
        },
        TileHeaderText: {
            fontSize: 30,
            paddingTop: 20,
            color: 'rgba(96,100,109, 1)',
            lineHeight: 24,
            textAlign: 'left',
            fontWeight: 'bold'
        },
        MagnifyingGlass: {
            padding: 10,
            color: 'rgba(96,100,109, 1)'
        },
        Check: {
            padding: 10,
            color: 'rgba(96,100,109, 1)'
        },
        SubHeader: {
            flex: 3,
            flexDirection: 'row'
        },
        SubText: {
            fontSize: 20,
            padding: 10,
            color: 'rgba(96,100,109, 1)',
            lineHeight: 24,
            textAlign: 'left',
            fontWeight: 'bold'
        },
        CurrentWord: {
            fontSize: 20,
            paddingTop: 10,
            color: 'rgba(96,100,109, 1)',
            lineHeight: 24,
            textAlign: 'left',
            fontWeight: 'bold'
        },
        Options: {
            flex: 3,
            flexDirection: 'row',
            alignContent: 'center',
            justifyContent: 'center'
        },
        containerLoading: {
            alignItems: 'center'
        },
        Loading: {
            margin: 40,
            padding: 10,
            color: 'rgba(102,180,32, 1)'
        }
    });
});