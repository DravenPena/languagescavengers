__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/home/monopolized/github/languagescavengers/UI/components/DiscoveryModeTile.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _vectorIcons = _require(_dependencyMap[3], "@expo/vector-icons");

    var _Card = _require(_dependencyMap[4], "./Card");

    var _Card2 = _interopRequireDefault(_Card);

    var _vocabDictionary = _require(_dependencyMap[5], "../data/vocabDictionary");

    var _vocabDictionary2 = _interopRequireDefault(_vocabDictionary);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        DiscoveryModeTile: {
            displayName: "DiscoveryModeTile"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/monopolized/github/languagescavengers/UI/components/DiscoveryModeTile.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var DiscoveryModeTile = _wrapComponent("DiscoveryModeTile")(function (_React$Component) {
        _inherits(DiscoveryModeTile, _React$Component);

        function DiscoveryModeTile(props) {
            var _this2 = this;

            _classCallCheck(this, DiscoveryModeTile);

            var _this = _possibleConstructorReturn(this, (DiscoveryModeTile.__proto__ || Object.getPrototypeOf(DiscoveryModeTile)).call(this, props));

            _this.updateUserData = function _callee() {
                var currentWord, score;
                return regeneratorRuntime.async(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return regeneratorRuntime.awrap(_this.getCurrentWord());

                            case 2:
                                currentWord = _context.sent;
                                _context.next = 5;
                                return regeneratorRuntime.awrap(_this.getScore());

                            case 5:
                                score = _context.sent;

                                _this.setState({
                                    currentWord: currentWord,
                                    score: score
                                });

                            case 7:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, null, _this2);
            };

            _this.getScore = function _callee2() {
                var value;
                return regeneratorRuntime.async(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.prev = 0;
                                _context2.next = 3;
                                return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem('DiscoveryModeScore'));

                            case 3:
                                value = _context2.sent;

                                if (!(value !== null)) {
                                    _context2.next = 8;
                                    break;
                                }

                                return _context2.abrupt("return", value);

                            case 8:
                                _context2.next = 10;
                                return regeneratorRuntime.awrap(_reactNative.AsyncStorage.setItem('DiscoveryModeScore', '0'));

                            case 10:
                                return _context2.abrupt("return", 0);

                            case 11:
                                _context2.next = 17;
                                break;

                            case 13:
                                _context2.prev = 13;
                                _context2.t0 = _context2["catch"](0);
                                alert(_context2.t0);
                                return _context2.abrupt("return");

                            case 17:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, null, _this2, [[0, 13]]);
            };

            _this.getCurrentWord = function _callee3() {
                var value, index, word;
                return regeneratorRuntime.async(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.prev = 0;
                                _context3.next = 3;
                                return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem('DiscoveryModeCurrentWord'));

                            case 3:
                                value = _context3.sent;

                                if (!(value !== null)) {
                                    _context3.next = 9;
                                    break;
                                }

                                index = parseInt(value);
                                return _context3.abrupt("return", _vocabDictionary2.default.DictionarySpanish[index]);

                            case 9:
                                word = _vocabDictionary2.default.DictionarySpanish[0];
                                _context3.next = 12;
                                return regeneratorRuntime.awrap(_reactNative.AsyncStorage.setItem('DiscoveryModeCurrentWord', '0'));

                            case 12:
                                return _context3.abrupt("return", word);

                            case 13:
                                _context3.next = 19;
                                break;

                            case 15:
                                _context3.prev = 15;
                                _context3.t0 = _context3["catch"](0);
                                alert(_context3.t0);
                                return _context3.abrupt("return");

                            case 19:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, null, _this2, [[0, 15]]);
            };

            _this.state = {
                currentWord: '',
                score: 0
            };
            return _this;
        }

        _createClass(DiscoveryModeTile, [{
            key: "componentDidMount",
            value: function componentDidMount() {
                this.updateUserData();
            }
        }, {
            key: "render",
            value: function render() {
                var _this3 = this;

                return _react3.default.createElement(
                    _reactNative.TouchableHighlight,
                    {
                        onPress: function onPress() {
                            return _this3.props.navigation.navigate('DiscoveryMode');
                        },
                        underlayColor: "white",
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 74
                        }
                    },
                    _react3.default.createElement(
                        _Card2.default,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 78
                            }
                        },
                        _react3.default.createElement(
                            _reactNative.View,
                            {
                                style: styles.Header,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 79
                                }
                            },
                            _react3.default.createElement(_vectorIcons.FontAwesome, {
                                name: "rocket",
                                size: 30,
                                style: styles.MagnifyingGlass,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 80
                                }
                            }),
                            _react3.default.createElement(
                                _reactNative.Text,
                                {
                                    style: styles.TileHeaderText,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 81
                                    }
                                },
                                " Discovery Mode "
                            )
                        ),
                        _react3.default.createElement(
                            _reactNative.View,
                            {
                                style: styles.SubHeader,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 83
                                }
                            },
                            _react3.default.createElement(
                                _reactNative.View,
                                {
                                    style: styles.Data,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 84
                                    }
                                },
                                _react3.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: styles.SubText,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 85
                                        }
                                    },
                                    " Current Word  "
                                ),
                                _react3.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: styles.userData,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 86
                                        }
                                    },
                                    " ",
                                    this.state.currentWord,
                                    " "
                                )
                            ),
                            _react3.default.createElement(
                                _reactNative.View,
                                {
                                    style: styles.Data,
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 88
                                    }
                                },
                                _react3.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: styles.SubText,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 89
                                        }
                                    },
                                    " Overall Score  "
                                ),
                                _react3.default.createElement(
                                    _reactNative.Text,
                                    {
                                        style: styles.userData,
                                        __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 90
                                        }
                                    },
                                    " ",
                                    this.state.score,
                                    " "
                                )
                            )
                        )
                    )
                );
            }
        }]);

        return DiscoveryModeTile;
    }(_react3.default.Component));

    exports.default = DiscoveryModeTile;

    var styles = _reactNative.StyleSheet.create({
        container: {
            flex: 1
        },
        Header: {
            flex: 1,
            flexDirection: 'row'
        },
        MagnifyingGlass: {
            padding: 10,
            color: 'rgba(96,100,109, 1)'
        },
        TileHeaderText: {
            fontSize: 30,
            paddingTop: 20,
            color: 'rgba(96,100,109, 1)',
            lineHeight: 24,
            textAlign: 'left',
            fontWeight: 'bold'
        },
        SubHeader: {
            flex: 1,
            flexDirection: 'row'
        },
        SubText: {
            fontSize: 17,
            padding: 10,
            color: 'rgba(96,100,109, 1)',
            lineHeight: 24,
            textAlign: 'left',
            fontWeight: 'bold'
        },
        userData: {
            fontSize: 15,
            paddingLeft: 12,
            color: 'rgba(96,100,109, 1)',
            lineHeight: 24,
            textAlign: 'left',
            fontWeight: 'bold'
        }
    });
});